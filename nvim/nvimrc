" vim: set foldlevel=0 foldmethod=indent:

" Env options
    let g:python_version = matchstr(system("python --version | cut -f2 -d' '"), '^[0-9]')
    " if g:python_version =~ 3
    "     let g:python2_host_prog = '/usr/bin/python2'
    " else
    "     let g:python3_host_prog = '/usr/bin/python3'
    " endif
    let g:python2_host_prog = "/usr/bin/python2"
    let g:python3_host_prog = "/usr/bin/python3"

" Load plugins
    call plug#begin('~/.config/nvim/plugged')

    " Utils
    if executable('ag')
        " TODO: use it, possibly with unite
        Plug 'rking/ag.vim'
    endif

    if executable('ctags')
        " loading it on-demand breaks Airline
        " Plug 'majutsushi/tagbar' ", { 'on': 'TagbarToggle' }
        Plug 'ludovicchabant/vim-gutentags'
    endif

    " Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install'  }
    Plug 'cloudhead/neovim-fuzzy'
    Plug 'tpope/vim-vinegar'
    Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
    " Display marks
    Plug 'kshenoy/vim-signature'
    " Fancy start screen & session management
    Plug 'mhinz/vim-startify'
    Plug 'qpkorr/vim-bufkill'

    " Tmux support
    " Plug 'jpalardy/vim-slime'

    " Git
    Plug 'tpope/vim-fugitive'
    " Plug 'mhinz/vim-signify'
    Plug 'mattn/gist-vim'

    " Text sculpting
    Plug 'junegunn/vim-easy-align'
    " I find it supperior to NerdCommenter & vim-commentary
    Plug 'tomtom/tcomment_vim'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-repeat'

    " Language support
    Plug 'tmhedberg/SimpylFold', { 'for': 'python' }
    Plug 'mitsuhiko/vim-python-combined', { 'for': 'python' }
    Plug 'mitsuhiko/vim-jinja', { 'for': ['html', 'htmldjango'] }
    Plug 'tpope/vim-markdown', { 'for': 'markdown' }
    Plug 'chase/vim-ansible-yaml', { 'for': ['yaml', 'ansible'] }

    " Autocompletion & Syntax check
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'zchee/deoplete-jedi'
    Plug 'neomake/neomake'
    Plug 'SirVer/ultisnips', { 'on': [] }
    Plug 'honza/vim-snippets'
    " Automatic closing of quotes, parenthesis, brackets, etc.
    " TODO: look into HTML tag closing
    Plug 'Raimondi/delimitMate'

    " UI
    Plug 'bling/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " Colorschemes
    Plug 'chriskempson/vim-tomorrow-theme'
    Plug 'chriskempson/base16-vim'
    Plug 'jnurmine/Zenburn'
    Plug 'bcicen/vim-vice'
    Plug 'twilight256.vim'
    Plug 'gosukiwi/vim-atom-dark'
    Plug 'zeis/vim-kolor'
    Plug 'AlessandroYorba/Sierra'
    Plug 'romainl/Apprentice', { 'branch': 'fancylines-and-neovim' }
    Plug 'scheakur/vim-scheakur'
    Plug 'fxn/vim-monochrome'
    Plug 'rakr/vim-one'
    " Sublime material theme
    Plug 'jdkanani/vim-material-theme'
    " Google material design
    Plug 'NLKNguyen/papercolor-theme'

    call plug#end()

    " augroup defer_plugin_load
    "     au!
    "     au! InsertEnter * call plug#load('ultisnips', 'YouCompleteMe')
    "                    \| call youcompleteme#Enable() | au! defer_plugin_load
    " augroup END

" General
    filetype plugin indent on   " Automatically detect file types.
    syntax enable               " Syntax highlighting
    set synmaxcol=200           " highlight only first 200 columns
    syntax sync minlines=250    " Possibly faster highlighting for big files
    set clipboard+=unnamedplus  " Use proper buffer for clipboard on linux"
    set hidden                  " Allow for switching unsaved buffers
    set viewoptions+=unix,slash " Unix-windows compatibility

    " Undo & backup
    set nowritebackup
    set noswapfile
    set undofile                " Persistent undo is sexy
    set undolevels=1000         " Maximum number of undo
    set undoreload=100000       " Save complete files for undo on reload if it has less lines than this

    " Search
    set ignorecase              " Case insensitive search...
    set smartcase               " ...until upper-case letter is typed

    " UI look and behavior
    set title                   " Allow nvim to set window title
    set showcmd                 " Show partial commands in status line and selected characters/lines in visual mode
    set noshowmode              " Don't show mode, Airline takes care of that
    set shortmess+=mr           " Abbrev. of messages (avoids 'hit enter')
    set lazyredraw              " Avoid scrolling problems
    set vb t_vb=                " Prevent screen flashing
    set winminheight=0          " Windows can be 0 line high (only statusbar)
    set splitbelow              " Put new window below the current one
    set splitright              " Put new window right of the current one
    set scrolloff=0             " Min nr of lines to keep above/below cursor
    set sidescroll=1            " Minimal number of columns to scroll horiz.
    set sidescrolloff=0         " Minimal number of columns to keep on sides
    set cursorline              " Highlight cursor line
    set number                  " Display current line number
    set relativenumber          " Use relative line numbering
    set nowrap                  " Don't wrap long lines
    set list
    set listchars=nbsp:␣,extends:❯,precedes:❮,tab:»\ ,trail:·
    " set foldminlines=5
    set foldlevelstart=99

    " Commandline completion
    " Command <Tab> completion: list matches, then longest common part,
    " then all.
    set wildmode=list:longest,full
    set wildignorecase
    set wildignore+=*.o,*~,.lo,*.obj,*.pyc,*.jar
    set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
    set suffixes+=.in,.a        " Files with lower priority while completing

    " Hide cursor line in insert mode
    aug cline
        au!
        au WinLeave,InsertEnter * set nocursorline
        au WinEnter,InsertLeave * set cursorline
    aug END

    " Update diff after save
    aug DiffUpdate
        au!
        au BufWritePost * if &diff | diffupdate | endif
    aug END

    " Remember cursor position when switcing buffers
    aug CursorPosition
        au!
        au BufLeave * let b:winview = winsaveview()
        au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
    aug END

" Formatting & Editting
    set ts=4 sw=4 sts=4         " 1 Tab equals to 4 spaces
    set shiftround              " Round indent to multiple of shiftwidth
    set expandtab               " Convert tabs to spaces
    " set tildeop                 " Let tilde work with movement keys
    set virtualedit=onemore,block " Allow for cursor beyond last character
    set completeopt=menuone

    " Remove trailing whitespaces and ^M chars
    augroup FileTypes
        au!
        au FileType c,cpp,java,go,javascript,python,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
        au FileType python setlocal colorcolumn=80
        au FileType text setlocal textwidth=80 colorcolumn=+1
        au FileType simplenote setlocal nonumber norelativenumber
        au BufRead,BufNewFile *.jinja2 setlocal filetype=htmldjango
        " au FileType yaml setlocal ft=ansible
    augroup END

" Colors
    set background=dark
    if ($TERM =~ "xterm") || ($TERM =~ "-256color")
        " set t_Co=256
        " set termguicolors
        " colorscheme Tomorrow-Night-Eighties
        " let g:airline_theme = 'base16_eighties'
        let base16colorspace=256
        colorscheme base16-eighties
        " set termguicolors
        " colorscheme sierra
        " colorscheme vice
        " let g:zenburn_high_Contrast = 1
        " colorscheme zenburn
        " let g:one_allow_italics = 1
        " set termguicolors
        " colorscheme one
        " let g:airline_theme = 'zenburn'
        " " Apprentice
        "     colorscheme apprentice
        "     let g:airline_theme='apprentice'
        "     hi Constant ctermfg=210
        "     hi DiffText ctermfg=210
        "     hi SpellRare ctermfg=210
        " colorscheme kolor
        " colorscheme scheakur
        " colorscheme twilight256
        " colorscheme atom-dark-256
        " set background=dark
        " set termguicolors
        " colorscheme PaperColor
        " let g:airline_theme='papercolor'
        " colorscheme material-theme
    endif
    " paren highlighting can be annoying
    " hi MatchParen cterm=underline ctermfg=14 ctermbg=none
    " hi MatchParen cterm=underline ctermfg=none ctermbg=161
    " comments are always italic
    hi Comment cterm=italic
    " hi ColorColumn ctermbg=236

" Keymaps
    " Remap <Leader> to SPACEBAR
    let g:mapleader = ' '
    let g:maplocalleader = '\\'

    " Clean search highlighting
    nnoremap <silent> <esc> :nohlsearch<CR>

    " Toggle folding
    nnoremap <Tab> za

    " Simpler saving/quiting
    nnoremap <silent> <leader>w :w<CR>
    " nnoremap <silent> <leader>q :q<CR>
    nnoremap <silent> <leader>n :enew<CR>
    cnoremap q1 q!

    " Jump to exact position
    noremap ` '
    noremap ' `

    " Use Enter as : and fix problems caused by that
    nnoremap <CR> :
    augroup enter_esc
        au!
        au BufReadPost quickfix nnoremap <buffer> <CR> <CR>
        au BufReadPost quickfix nnoremap <buffer> <Esc> :q<CR>
        au CmdWinEnter * nnoremap <buffer> <CR> <CR>
        au CmdWinEnter * nnoremap <buffer> <Esc> :q<CR>
        au FileType netrw nnoremap <buffer> <Esc> :e #<CR>
    augroup END

    " Easier access to command history
    nnoremap <leader>; q:

    " Die ex mode, die!
    nnoremap Q <Nop>

    " While searching center on the line with current result
    nnoremap N Nzzzv
    nnoremap n nzzzv
    nnoremap g; g;zzzv
    nnoremap g. g.zzzv

    " fly between buffers
    nnoremap <leader>l :ls<CR>:b<space>
    " nnoremap <leader><leader> <C-^>
    nnoremap <leader>] :bnext<CR>
    nnoremap <leader>[ :bprev<CR>
    " nnoremap <BS> <C-^>

    " use sane regexes
    nnoremap / /\v
    vnoremap / /\v

    " Quickly change tab length
    nnoremap <leader>2 :set ts=2 sw=2 sts=2<CR>
    nnoremap <leader>4 :set ts=4 sw=4 sts=4<CR>
    nnoremap <leader>8 :set ts=8 sw=8 sts=8<CR>

    " Easier window navigation, <C-W>_ maximizes window after switch"
    " nnoremap <C-J> <C-W>j
    " nnoremap <C-K> <C-W>k
    " nnoremap <C-L> <C-W>l
    " nnoremap <C-H> <C-W>h
    tnoremap <A-h> <C-\><C-n><C-w>h
    tnoremap <A-j> <C-\><C-n><C-w>j
    tnoremap <A-k> <C-\><C-n><C-w>k
    tnoremap <A-l> <C-\><C-n><C-w>l
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l
    " autocmd WinEnter term://* startinsert
    augroup term_enter
        au!
        au TermOpen * setlocal nolist
    augroup END

    " Make esc quit insert mode in terminal
    tnoremap <Esc> <C-\><C-n>

    " Make arrowkeys resize viewports accordingly
    nnoremap <S-Left> :vertical resize +1<CR>
    nnoremap <S-Right> :vertical resize -1<CR>
    nnoremap <S-Up> :resize -1<CR>
    nnoremap <S-Down> :resize +1<CR>

    " save the current file as root
    cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

" Plugin options
    " vim-plug
        let g:plug_window = "enew"

    " deoplete
        let g:deoplete#enable_at_startup = 1
        " inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : deoplete#manual_complete()
        inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "<Tab>"
        " inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : deoplete#undo_completion()
        inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "<S-Tab>"

    " Startify session
        let g:startify_session_dir = "$HOME/.config/nvim/sessions"

    " PowerLine / airline
    " Don't lag on changing modes - fixes problems with YCM autocompletion
    if ! has('gui_running')
        set ttimeoutlen=10
        augroup FastEscape
            autocmd!
            au InsertEnter * set timeoutlen=0
            au InsertLeave * set timeoutlen=1000
        augroup END
    endif

    " Airline
        let g:airline#extensions#whitespace#enabled = 0
        let g:airline#extensions#whitespace#show_message = 0
        let g:airline_left_sep=''
        let g:airline_right_sep=''

    " Neomake
        let g:neomake_python_enabled_makers = ['flake8']
        au FileType,BufWritePost *.py Neomake

    " vim-easy-align
        " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
        vmap <Enter> <Plug>(EasyAlign)
        " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
        nmap <Leader>a <Plug>(EasyAlign)

    " neovim-fuzzy
        nnoremap <C-p> :FuzzyOpen<CR>
        nnoremap <Leader>f :FuzzyOpen<CR>

    " tcomment
        let g:tcommentMapLeader1 = 0
        let g:tcommentMapLeader2 = 0
        let g:tcommentMapLeaderUncommentAnyway = 0
        let g:tcommentMapLeaderCommentAnyway = 0
        let g:tcommentTextObjectInlineComment = 0

    " TagBar
        " " Jump to tagbar window upon opening it
        " let g:tagbar_autofocus = 1
        " nnoremap <silent> <leader>tt :TagbarToggle<CR>
        " nnoremap <silent> <leader>ta :TagbarOpenAutoClose<CR>

    " Fugitive
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>

    " UndoTree
        nnoremap <Leader>u :UndotreeToggle<CR>
        " If undotree is opened, it is likely one wants to interact with it.
        let g:undotree_SetFocusWhenToggle=1

    " Netrw
        " prevent leaking of directory history
        let g:netrw_dirhistmax=-1

    " delimitMate
        let delimitMate_expand_space=1
        let delimitMate_expand_cr=2
        " TODO: don't really know what that does
        let delimitMate_jump_expansion=1

    " vim-slime
        let g:slime_target = "tmux"
        let g:slime_python_ipython = 1

    " ultisnips
        let g:UltiSnipsExpandTrigger="<c-j>"
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
        let g:UltiSnipsJumpBackwardTrigger="<c-k>"

    " simplenote
        source $HOME/.config/simplenote/simplenote.vim

" Functions
    " Strip whitespace
        function! StripTrailingWhitespace()
            let _s=@/
            let l = line(".")
            let c = col(".")
            %s/\s\+$//e
            let @/=_s
            call cursor(l, c)
        endfunction
