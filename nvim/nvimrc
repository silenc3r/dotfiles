"-----------------------------------------------------------------------------
" author:   Dawid Zych
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:
"-----------------------------------------------------------------------------

" Load plugins {
    call plug#begin('~/.nvim/plugged')

    " Utils
    if executable('ag')
        " TODO: use it, possibly with unite
        Plug 'rking/ag.vim'
    endif

    if executable('ctags')
        " loading it on-demand breaks Airline
        " Plug 'majutsushi/tagbar' ", { 'on': 'TagbarToggle' }
        Plug 'ludovicchabant/vim-gutentags'
    endif

    " Plug 'Shougo/unite.vim', { 'on': 'Unite' }
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install'  }
    Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
    Plug 'justinmk/vim-sneak'
    " Display marks
    Plug 'kshenoy/vim-signature'
    " Fancy start screen & session management
    Plug 'mhinz/vim-startify'
    " color matching parentheses
    Plug 'luochen1990/rainbow'
    " alternative
    " Plug 'amdt/vim-niji'

    " Tmux support
    Plug 'jpalardy/vim-slime'
    Plug 'christoomey/vim-tmux-navigator'

    " Git
    Plug 'tpope/vim-fugitive'
    Plug 'mhinz/vim-signify'
    Plug 'mattn/gist-vim'

    " Text sculpting
    Plug 'junegunn/vim-easy-align'
    " I find it supperior to NerdCommenter & vim-commentary
    Plug 'tomtom/tcomment_vim'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-repeat'

    " Autocompletion & Syntax check
    Plug 'Valloric/YouCompleteMe'
    Plug 'scrooloose/syntastic'
    " Plug 'SirVer/ultisnips'
    " Automatic closing of quotes, parenthesis, brackets, etc.
    " TODO: look into HTML tag closing
    Plug 'Raimondi/delimitMate'

    " UI
    Plug 'bling/vim-airline'

    " Colorschemes
    Plug 'chriskempson/vim-tomorrow-theme'
    Plug 'jnurmine/Zenburn'
    Plug 'twilight'
    Plug 'sickill/vim-monokai'
    Plug 'nanotech/jellybeans.vim'
    Plug 'morhetz/gruvbox'
    Plug 'junegunn/seoul256.vim'
    Plug 'tomasr/molokai'
    Plug 'gosukiwi/vim-atom-dark'
    Plug 'reedes/vim-colors-pencil'
    Plug 'zeis/vim-kolor'
    Plug 'cocopon/iceberg.vim'
    Plug 'w0ng/vim-hybrid'
    Plug 'jpo/vim-railscasts-theme'
    Plug 'romainl/Apprentice'

    " Language support
    Plug 'klen/python-mode', { 'for': 'python' }
    Plug 'mitsuhiko/vim-jinja', { 'for': ['html', 'htmldjango'] }
    Plug 'tpope/vim-markdown', { 'for': 'markdown' }
    Plug 'guns/vim-clojure-static', { 'for': ['clojure', 'clojurescript'] }
    Plug 'chase/vim-ansible-yaml', { 'for': 'yaml' }

    call plug#end()
" }

" General {
    filetype plugin indent on   " Automatically detect file types.
    syntax enable               " Syntax highlighting
    set synmaxcol=200           " highlight only first 200 columns
    syntax sync minlines=250    " Possibly faster highlighting for big files
    " set mouse=civ               " Mouse support
    " scriptencoding utf-8        " TODO: examine what that does
    set clipboard+=unnamedplus  " Use proper buffer for clipboard on linux"
    set hidden                  " Don't write to disk upon buffer switch
    set autoread                " Auto reload files changed outside vim
    set viewoptions+=unix,slash " Unix-windows compatibility
    set history=1000            " Store a ton of history (default is 20)

    " Undo & backup
    set nowritebackup
    set noswapfile
    set undofile                " Persistent undo is sexy
    set undolevels=1000         " Maximum number of undo
    set undoreload=100000       " Save complete files for undo on reload if it has less lines than this
    set undodir=$HOME/.nvim/undo//

    " Search
    set incsearch               " Show next match while entering search
    set hlsearch                " Highlight searches by default
    set ignorecase              " Case insensitive search...
    set smartcase               " ...until upper-case letter is typed

    " UI look and behavior
    set title                   " Allow nvim to set window title
    set showcmd                 " Show partial commands in status line and selected characters/lines in visual mode
    set laststatus=2            " Always display the statusline in all windows
    set noshowmode              " Don't show mode, Airline takes care of that
    set shortmess+=mr           " Abbrev. of messages (avoids 'hit enter')
    set lazyredraw              " Avoid scrolling problems
    set vb t_vb=                " Prevent screen flashing
    set winminheight=0          " Windows can be 0 line high (only statusbar)
    set splitbelow              " Put new window below the current one
    set splitright              " Put new window right of the current one
    set scrolloff=5             " Min nr of lines to keep above/below cursor
    set sidescroll=2            " Minimal number of columns to scroll horiz.
    set sidescrolloff=8         " Minimal number of columns to keep on sides
    set cursorline              " Highlight cursor line
    set number                  " Display current line number
    set relativenumber          " Use relative line numbering
    set nowrap                  " Don't wrap long lines
    set list
    set listchars=nbsp:␣,extends:❯,precedes:❮,tab:»\ ,trail:·

    " Commandline completion
    set wildmenu
    set wildmode=list:longest,full
    set wildignorecase
    set wildignore+=*.o,*~,.lo,*.obj,*.pyc,*.jar
    set suffixes+=.in,.a        " Files with lower priority while completing
" }

" Formatting & Editting {
    set autoindent              " Indent at the same level of the previous line
    set ts=4 sw=4 sts=4         " 1 Tab equals to 4 spaces
    set shiftround              " Round indent to multiple of shiftwidth
    set expandtab               " Convert tabs to spaces
    set smarttab                " Be smart about inserting/deleting tabs
    set gdefault                " Set g flag on :s substitutions by default
    " set tildeop                 " Let tilde work with movement keys
    set backspace=2             " Allow backspace in insert mode
    set virtualedit=onemore,block " Allow for cursor beyond last character
    set complete-=i

    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,go,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    autocmd FileType python setlocal colorcolumn=79
    autocmd FileType text setlocal textwidth=80 colorcolumn=+1
    " autocmd FileType yaml setlocal sw=2 ts=2 sts=2 indentkeys=0{,0},0#,!^F,o,O,e
    autocmd FileType yaml setlocal ft=ansible
    autocmd FileType spec setlocal sw=2 ts=2 sts=2 noet
" }

" Colors {
    set background=dark
    " if ($TERM =~ "xterm") || ($TERM =~ "-256color")
        " set t_Co=256
        " colorscheme Tomorrow-Night-Eighties
        " colorscheme Tomorrow-Night
        " colorscheme monokai
        " colorscheme railscasts
        " let g:airline_theme = 'zenburn'
        " let g:zenburn_high_Contrast = 1
        " colorscheme zenburn
        " let g:airline_theme='gruvbox'
        " let g:gruvbox_italic=1
        " colorscheme gruvbox
        colorscheme apprentice
        let g:airline_theme='apprentice'
        " let g:hybrid_use_Xresources = 1
        " colorscheme hybrid
        " colorscheme kolor
        " colorscheme iceberg
        " colorscheme twilight
        " colorscheme jellybeans
        " let g:seoul256_background = 235
        " colorscheme seoul256
        " let g:pencil_terminal_italics = 1
        " let g:airline_theme = 'pencil'
        " colorscheme pencil
        " colorscheme atom-dark-256
        " set background=dark
    " endif
    " paren highlighting can be annoying
    " hi MatchParen cterm=underline ctermbg=none ctermfg=none
    hi MatchParen cterm=underline
    " comments are always italic
    hi Comment cterm=italic
    hi ColorColumn ctermbg=236
" }

" Keymaps {
    " Remap <Leader> to SPACEBAR
    let g:mapleader = ' '

    " Toggle search highlighting
    nmap <silent> <leader>h :nohlsearch<CR>

    " While searching center on the line with current result
    nnoremap N Nzzzv
    nnoremap n nzzzv
    nnoremap g; g;zzzv
    nnoremap g. g.zzzv

    " Easier horizontal scrolling
    " TODO: not using that - possible removal 2014-11-19
    nnoremap zl 15zl
    nnoremap zh 15zh

    " fly between buffers
    nnoremap <leader>l :ls<CR>:b<space>

    " use sane regexes
    nnoremap / /\v
    vnoremap / /\v

    " Quickly change tab length
    nnoremap <leader>2 :set ts=2 sw=2 sts=2<CR>
    nnoremap <leader>4 :set ts=4 sw=4 sts=4<CR>
    nnoremap <leader>8 :set ts=8 sw=8 sts=8<CR>

    " Easier window navigation, <C-W>_ maximizes window after switch"
    nnoremap <C-J> <C-W>j
    nnoremap <C-K> <C-W>k
    nnoremap <C-L> <C-W>l
    nnoremap <C-H> <C-W>h

    " save the current file as root
    " TODO: it's crashing neovim for some reason
    cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

    " Some annoying keyfixes
      command! -bang -nargs=* -complete=file E e<bang> <args>
      command! -bang -nargs=* -complete=file W w<bang> <args>
      command! -bang -nargs=* -complete=file Wq wq<bang> <args>
      command! -bang -nargs=* -complete=file WQ wq<bang> <args>
      command! -bang Wa wa<bang>
      command! -bang WA wa<bang>
      command! -bang Q q<bang>
      command! -bang QA qa<bang>
      command! -bang Qa qa<bang>
" }

" Plugins {
    " Startify session {
        let g:startify_session_dir = "$HOME/.nvim/sessions"
    " }

    " PowerLine / airline {
    " Don't lag on changing modes - fixes problems with YCM autocompletion
    if ! has('gui_running')
        set ttimeoutlen=10
        augroup FastEscape
            autocmd!
            au InsertEnter * set timeoutlen=0
            au InsertLeave * set timeoutlen=1000
        augroup END
    endif
    " }

    " Airline {
        let g:airline#extensions#whitespace#enabled = 0
        let g:airline#extensions#whitespace#show_message = 0
        let g:airline_left_sep=''
        let g:airline_right_sep=''
    " }

    " Syntastic {
        let g:syntastic_check_on_open = 1
        let g:syntastic_python_checkers = ['flake8']
        " let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,W801,E226"'
    " }

    " vim-easy-align {
        " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
        vmap <Enter> <Plug>(EasyAlign)
        " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
        nmap <Leader>a <Plug>(EasyAlign)
    " }

    " Python-Mode {
        " let Syntastic take care of syntax checking
        let g:pymode_lint = 0
        " use YouCompleteMe for code-completion
        let g:pymode_rope_completion = 0
        " don't fold my code for fucking sake!
        let g:pymode_folding = 0
        " improve syntax highlighting
        " let g:pymode_syntax = 0
        " let g:pymode_syntax_highlight_self = 0
        let g:pymode_syntax_print_as_function = 1
    " }

    " Unite {
        " TODO: I need to look at this some day
        let g:unite_source_history_yank_enable = 1
        " call unite#filters#matcher_default#use(['matcher_fuzzy'])
        autocmd FileType unite call unite#filters#matcher_default#use(['matcher_fuzzy'])
        nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files -start-insert file_rec/async:!<cr>
        nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files -start-insert file<cr>
        nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru -start-insert file_mru<cr>
        nnoremap <leader>o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
        nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank history/yank<cr>
        nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer buffer<cr>
    " }

    " " TagBar {
    "     " Jump to tagbar window upon opening it
    "     let g:tagbar_autofocus = 1
    "     nnoremap <silent> <leader>tt :TagbarToggle<CR>
    "     nnoremap <silent> <leader>ta :TagbarOpenAutoClose<CR>
    " "}

    " Fugitive {
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
    "}

    " UndoTree {
        nnoremap <Leader>u :UndotreeToggle<CR>
        " If undotree is opened, it is likely one wants to interact with it.
        let g:undotree_SetFocusWhenToggle=1
    " }

    " Netrw {
        " prevent leaking of directory history
        let g:netrw_dirhistmax=-1
    " }

    " Sneak {
        " let it behave similar to easymotion
        let g:sneak#streak = 1
        " use global vim settings for case sensitivity
        let g:sneak#use_ic_scs = 1
    " }

    " " rainbow {
    "     let g:rainbow_active=1
    "         let g:rainbow_conf = {
    "         \   'ctermfgs': ['darkblue', 'darkred', 'darkmagenta', 'darkgreen', 'brown', 'darkcyan'],
    "         \   'operators': '_,_',
    "         \   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
    "         \   'separately': {
    "         \       '*': {},
    "         \       'lisp': {
    "         \           'ctermfgs': ['darkgray', 'darkblue', 'darkmagenta', 'darkcyan', 'darkred', 'darkgreen'],
    "         \       },
    "         \       'vim': {
    "         \           'parentheses': [['fu\w* \s*.*)','endfu\w*'], ['for','endfor'], ['while', 'endwhile'], ['if','_elseif\|else_','endif'], ['(',')'], ['\[','\]'], ['{','}']],
    "         \       },
    "         \       'css': 0,
    "         \   }
    "         \}
    " " }

    " delimitMate {
        let delimitMate_expand_space=1
        let delimitMate_expand_cr=2
        " TODO: don't really know what that does
        let delimitMate_jump_expansion=1
    " }

    " vim-slime {
        let g:slime_target = "tmux"
        let g:slime_python_ipython = 1
    " }
" }

" Functions {
    " Strip whitespace {
        function! StripTrailingWhitespace()
            let _s=@/
            let l = line(".")
            let c = col(".")
            %s/\s\+$//e
            let @/=_s
            call cursor(l, c)
        endfunction
    " }
" }
