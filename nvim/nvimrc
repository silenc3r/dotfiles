" vim: set foldlevel=0 foldmethod=indent:

" Env options
    " let g:python_version = matchstr(system("python --version | cut -f2 -d' '"), '^[0-9]')
    let g:python_host_prog = expand("$PYENV_ROOT") . "/versions/neovim2/bin/python"
    let g:python3_host_prog = expand("$PYENV_ROOT") . "/versions/neovim3/bin/python"

" Load plugins
    call plug#begin('~/.local/share/nvim/plugged')

    " Utils
    if executable('ctags')
        " loading it on-demand breaks Airline
        Plug 'majutsushi/tagbar' ", { 'on': 'TagbarToggle' }
        Plug 'ludovicchabant/vim-gutentags'
    endif
    " Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
    set rtp+=/usr/share/fzf/vim
    Plug 'junegunn/fzf.vim'
    Plug 'justinmk/vim-dirvish'
    Plug 'tpope/vim-eunuch'
    Plug 'simnalamburt/vim-mundo', { 'on': 'MundoToggle' }
    " Display marks
    Plug 'kshenoy/vim-signature'
    " Fancy start screen & session management
    Plug 'mhinz/vim-startify'
    Plug 'qpkorr/vim-bufkill'
    Plug 'Alok/notational-fzf-vim'

    " Git
    Plug 'tpope/vim-fugitive'
    Plug 'mhinz/vim-signify'
    Plug 'mattn/gist-vim'

    " Text sculpting
    Plug 'junegunn/vim-easy-align'
    " I find it supperior to NerdCommenter & vim-commentary
    Plug 'tomtom/tcomment_vim'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-repeat'

    " Language support
    Plug 'tmhedberg/SimpylFold', { 'for': 'python' }
    Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'python' }
    Plug 'mitsuhiko/vim-jinja', { 'for': ['html', 'htmldjango'] }
    Plug 'vim-python/python-syntax', { 'for': 'python' }
    Plug 'tpope/vim-markdown', { 'for': 'markdown' }
    " Plug 'chase/vim-ansible-yaml', { 'for': ['yaml', 'ansible'] }
    Plug 'sheerun/vim-polyglot'

    " Autocompletion & Syntax check
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'zchee/deoplete-jedi'
    Plug 'w0rp/ale'
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    Plug 'Raimondi/delimitMate'
    Plug 'kassio/neoterm'
    Plug 'janko-m/vim-test'

    " UI
    Plug 'bling/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " Colorschemes
    Plug 'jnurmine/Zenburn'
    Plug 'rakr/vim-one'
    " Google material design
    Plug 'NLKNguyen/papercolor-theme'
    Plug 'arcticicestudio/nord-vim'
    Plug 'joshdick/onedark.vim'
    Plug 'dracula/vim'
    Plug 'morhetz/gruvbox'
    Plug 'romainl/Apprentice', { 'branch': 'fancylines-and-neovim' }
    Plug 'reedes/vim-colors-pencil'

    call plug#end()

" General
    filetype plugin indent on   " Automatically detect file types.
    syntax enable               " Syntax highlighting
    set synmaxcol=200           " highlight only first 200 columns
    syntax sync minlines=250    " Possibly faster highlighting for big files
    set clipboard+=unnamedplus  " Use proper buffer for clipboard on linux"
    set hidden                  " Allow for switching unsaved buffers
    set viewoptions+=unix,slash " Unix-windows compatibility

    " Undo & backup
    set nowritebackup
    set noswapfile
    set undofile                " Persistent undo is sexy
    set undolevels=1000         " Maximum number of undo
    set undoreload=100000       " Save complete files for undo on reload if it has less lines than this

    " Search
    set ignorecase              " Case insensitive search...
    set smartcase               " ...until upper-case letter is typed

    " UI look and behavior
    set title                   " Allow nvim to set window title
    set showcmd                 " Show partial commands in status line and selected characters/lines in visual mode
    set noshowmode              " Don't show mode, Airline takes care of that
    set shortmess+=mr           " Abbrev. of messages (avoids 'hit enter')
    " set lazyredraw              " Avoid scrolling problems
    set vb t_vb=                " Prevent screen flashing
    set winminheight=0          " Windows can be 0 line high (only statusbar)
    set splitbelow              " Put new window below the current one
    set splitright              " Put new window right of the current one
    set sidescroll=1            " Minimal number of columns to scroll horiz.
    set cursorline              " Highlight cursor line
    set number                  " Display current line number
    set relativenumber          " Use relative line numbering
    set nowrap                  " Don't wrap long lines
    set list
    " bag of chars: ▶ ◀ ← → … … ⟩ ⟨ ❯ ❮
    set listchars=nbsp:␣,extends:…,precedes:…,tab:»\ ,trail:·
    set fillchars+=vert:│
    " set foldminlines=5
    set foldlevelstart=99

    set grepprg=rg\ --vimgrep

    " Commandline completion
    " Command <Tab> completion: list matches, then longest common part,
    " then all.
    set wildmode=list:longest,full
    set wildignorecase
    set wildignore+=*.o,*~,.lo,*.obj,*.pyc,*.jar
    set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
    set suffixes+=.in,.a        " Files with lower priority while completing

    " Hide cursor line in insert mode
    aug cline
        au!
        au WinLeave,InsertEnter * set nocursorline
        au WinEnter,InsertLeave * set cursorline
    aug END

    " Update diff after save
    aug DiffUpdate
        au!
        au BufWritePost * if &diff | diffupdate | endif
    aug END

    " Remember cursor position when switcing buffers
    aug CursorPosition
        au!
        au BufLeave * let b:winview = winsaveview()
        au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
    aug END

" Formatting & Editting
    set ts=4 sw=4 sts=4         " 1 Tab equals to 4 spaces
    " set shiftround              " Round indent to multiple of shiftwidth
    set expandtab               " Convert tabs to spaces
    " set tildeop                 " Let tilde work with movement keys
    set virtualedit=onemore,block " Allow for cursor beyond last character
    set completeopt=menuone

    " Remove trailing whitespaces and ^M chars
    augroup FileTypes
        au!
        au FileType c,cpp,java,go,javascript,python,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
        au FileType python setlocal colorcolumn=80
        au FileType text setlocal textwidth=80 colorcolumn=+1
        au BufRead,BufNewFile *.jinja2 setlocal filetype=htmldjango
        " au FileType yaml setlocal ft=ansible
    augroup END

" Colors
    set background=dark
    " set background=light
    if ($TERM =~ "xterm") || ($TERM =~ "-256color")
        set termguicolors
        " let g:one_allow_italics = 1
        " colorscheme one
            let g:onedark_terminal_italics = 1
            colorscheme onedark
            " hi Todo guifg=#abb2bf guibg=#5c6370
            hi Todo gui=bold,reverse guifg=#5c6370
        " colorscheme zenburn
        " let g:airline_theme = 'zenburn'
        " colorscheme twilight256
        " colorscheme PaperColor
        " let g:airline_theme='papercolor'
        " let g:nord_italic_comments = 1
        " colorscheme nord
        " colorscheme gruvbox
        " colorscheme base16-eighties
        " colorscheme dracula
        " colorscheme apprentice
        " let g:pencil_gutter_color = 1
        " let g:pencil_terminal_italics = 1
        " colorscheme pencil
    endif

" Keymaps
    " Remap <Leader> to SPACEBAR
    let g:mapleader = ' '
    let g:maplocalleader = '\\'

    " Clean search highlighting
    nnoremap <silent> <esc> :nohlsearch<CR>

    " Source init.nvim
    nnoremap <leader>~ :source $MYVIMRC<cr>

    " Toggle folding
    " nnoremap <Tab> za

    " Simpler saving/quiting
    nnoremap <silent> <leader>w :w<CR>
    cnoremap q1 q!

    " Jump to exact position
    noremap ` '
    noremap ' `

    " Use Enter as : and fix problems caused by that
    nnoremap <CR> :
    augroup enter_esc
        au!
        au BufReadPost quickfix nnoremap <buffer> <CR> <CR>
        au BufReadPost quickfix nnoremap <buffer> <Esc> :q<CR>
        au CmdWinEnter * nnoremap <buffer> <CR> <CR>
        au CmdWinEnter * nnoremap <buffer> <Esc> :q<CR>
        au FileType netrw nnoremap <buffer> <Esc> :e #<CR>
    augroup END

    " Easier access to command history
    nnoremap <leader>; q:

    " Die ex mode, die!
    nnoremap Q <Nop>

    " While searching center on the line with current result
    nnoremap N Nzzzv
    nnoremap n nzzzv
    nnoremap g; g;zzzv
    nnoremap g. g.zzzv

    " " fly between buffers
    " nnoremap <leader>l :ls<CR>:b<space>
    " nnoremap <leader><leader> <C-^>
    nnoremap <leader>] :bnext<CR>
    nnoremap <leader>[ :bprev<CR>
    " nnoremap <BS> <C-^>

    " use sane regexes
    nnoremap / /\v
    vnoremap / /\v

    " Easier window navigation
    tnoremap <A-h> <C-\><C-n><C-w>h
    tnoremap <A-j> <C-\><C-n><C-w>j
    tnoremap <A-k> <C-\><C-n><C-w>k
    tnoremap <A-l> <C-\><C-n><C-w>l
    inoremap <A-h> <C-\><C-n><C-w>h
    inoremap <A-j> <C-\><C-n><C-w>j
    inoremap <A-k> <C-\><C-n><C-w>k
    inoremap <A-l> <C-\><C-n><C-w>l
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l
    " autocmd WinEnter term://* startinsert
    " augroup term_enter
    "     au!
    "     au TermOpen * setlocal nolist
    "     " au BufEnter term://* startinsert
    "     " au BufLeave term://* stopinsert
    " augroup END

    " Make esc quit insert mode in terminal
    augroup esc_term
        au!
        tnoremap <Esc> <C-\><C-n>
        au FileType fzf tnoremap <buffer> <Esc> <Esc>
    augroup END

    " Make arrowkeys resize viewports accordingly
    nnoremap <S-Left> :vertical resize +1<CR>
    nnoremap <S-Right> :vertical resize -1<CR>
    nnoremap <S-Up> :resize -1<CR>
    nnoremap <S-Down> :resize +1<CR>

    " Highlight word under cursor without moving cursor
    map <silent> <leader>* :let @/ = '\<'.expand('<cword>').'\>'\|set hlsearch<CR>

" Plugin options
    " vim-plug
        let g:plug_window = "enew"

    " deoplete
        let g:deoplete#enable_at_startup = 1
        let g:deoplete#auto_complete_delay = 0
        inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "<Tab>"
        inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "<S-Tab>"

    " Startify session
        let g:startify_session_dir = "$HOME/.config/nvim/sessions"

    " PowerLine / airline
    " Don't lag on changing modes - fixes problems with YCM autocompletion
    if ! has('gui_running')
        set ttimeoutlen=10
        augroup FastEscape
            autocmd!
            au InsertEnter * set timeoutlen=0
            au InsertLeave * set timeoutlen=1000
        augroup END
    endif

    " Airline
        let g:airline#extensions#whitespace#enabled = 0
        let g:airline#extensions#whitespace#show_message = 0
        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif

        let g:airline_left_sep=''
        let g:airline_left_alt_sep = ''
        let g:airline_right_sep=''
        let g:airline_right_alt_sep = ''
        let g:airline_symbols.crypt = '🔒'
        let g:airline_symbols.branch = ''
        let g:airline_symbols.readonly = ''

        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#show_splits = 1
        let g:airline#extensions#tabline#show_buffers = 1
        let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
        let g:airline#extensions#tabline#show_tab_type = 0
        let g:airline#extensions#tabline#show_close_button = 0
        let g:airline#extensions#tabline#fnamemod = ':t'
        let g:airline#extensions#tabline#excludes = ["bash"]
        " let g:airline#extensions#tabline#fnametruncate = 10


        let g:airline#extensions#tabline#left_sep = ''
        let g:airline#extensions#tabline#left_alt_sep = ''
        let g:airline#extensions#tabline#right_sep = ''
        let g:airline#extensions#tabline#right_alt_sep = ''

        let g:airline#extensions#tabline#buffer_idx_mode = 1
        nmap <leader>1 <Plug>AirlineSelectTab1
        nmap <leader>2 <Plug>AirlineSelectTab2
        nmap <leader>3 <Plug>AirlineSelectTab3
        nmap <leader>4 <Plug>AirlineSelectTab4
        nmap <leader>5 <Plug>AirlineSelectTab5
        nmap <leader>6 <Plug>AirlineSelectTab6
        nmap <leader>7 <Plug>AirlineSelectTab7
        nmap <leader>8 <Plug>AirlineSelectTab8
        nmap <leader>9 <Plug>AirlineSelectTab9

    " Neomake
        " let g:neomake_error_sign = {'text': '●', 'texthl': 'NeomakeErrorSign'}
        " let g:neomake_warning_sign = {
        "     \   'text': '●',
        "     \   'texthl': 'NeomakeWarningSign',
        "     \ }
        " let g:neomake_python_enabled_makers = ['flake8']
        " au FileType,BufWritePost *.py Neomake

    " ALE
        let g:airline#extensions#ale#enabled = 1
        " let g:ale_sign_error = '>>'
        " let g:ale_sign_warning = '--'
        let g:ale_sign_column_always = 1

    " vim-easy-align
        vmap <Leader>a <Plug>(EasyAlign)
        nmap <Leader>a <Plug>(EasyAlign)

    " FZF
        let g:fzf_layout = {'window': 'enew'}
        let g:fzf_buffers_jump = 1
        nmap <leader>f :FZF<CR>
        nmap <leader>l :Buffers<CR>
        if executable('rg')
            let g:rg_command = '
                \ rg --column --line-number --no-heading --fixed-strings
                \ --smart-case --no-ignore --hidden --follow --color=always
                \ --glob "!{.git,__pycache__}/*" '
            command! -bang -nargs=* Rg
                \ call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)
        endif

    " tcomment
        let g:tcommentMapLeader1 = 0
        let g:tcommentMapLeader2 = 0
        let g:tcommentMapLeaderUncommentAnyway = 0
        let g:tcommentMapLeaderCommentAnyway = 0
        let g:tcommentTextObjectInlineComment = 0

    " TagBar
        let g:tagbar_autofocus = 1
        " nnoremap <silent> <leader>tt :TagbarToggle<CR>
        " nnoremap <silent> <leader>ta :TagbarOpenAutoClose<CR>
        nnoremap <silent> <leader>t :TagbarOpenAutoClose<CR>
        nnoremap <silent> <F9> :TagbarToggle<CR>

    " " Fugitive
    "     nnoremap <silent> <leader>gs :Gstatus<CR>
    "     nnoremap <silent> <leader>gd :Gdiff<CR>
    "     nnoremap <silent> <leader>gc :Gcommit<CR>
    "     nnoremap <silent> <leader>gb :Gblame<CR>
    "     nnoremap <silent> <leader>gl :Glog<CR>
    "     nnoremap <silent> <leader>gp :Git push<CR>

    " mundo
        let g:mundo_width = 25
        let g:mundo_preview_bottom = 1
        let g:mundo_verbose_graph = 0
        nnoremap <silent> <Leader>u :MundoToggle<cr>

    " delimitMate
        let delimitMate_expand_cr=1
        let delimitMate_expand_space=1
        let delimitMate_expand_inside_quotes = 1
        let delimitMate_jump_expansion=1
        " just testing it
        let delimitMate_balance_matchpairs = 1
        let delimitMate_excluded_regions = ""
        au FileType python let b:delimitMate_nesting_quotes = ['"']
        au FileType htmldjango let b:delimitMate_quotes = "\" ' %"

    " " iron
    "     vmap is <Plug>(iron-send-motion)
    "     nmap <leader>is <Plug>(iron-send-motion)
    "     nmap <leader>ir <Plug>(iron-repeat-cmd)
    "     nmap <leader>ie <Plug>(iron-cr)

    " neoterm
        let g:neoterm_size = 20
        " let g:neoterm_direct_open_repl = 1
        let g:neoterm_automap_keys = "<space><cr>"
        nnoremap <leader>TT :TREPLSetTerm 
        " nnoremap <leader>Tf :TREPLSendFile<cr>
        " nnoremap <leader>Tl :TREPLSendLine<cr>
        " vnoremap Ts :TREPLSendSelection<cr>
        let g:neoterm_keep_term_open = 0

    " ultisnips
        let g:UltiSnipsExpandTrigger="<c-j>"
        let g:UltiSnipsJumpForwardTrigger="<c-j>"
        let g:UltiSnipsJumpBackwardTrigger="<c-k>"

    " notational-fzf-vim
        let g:nv_directories = ['~/Notes']
        let g:default_extension = '.txt'
        let g:nv_preview_direction = 'up'
        " let g:nv_preview_width = 60
        let g:nv_use_short_pathnames = 1

    " python-syntax
        let g:python_highlight_all = 1
        let g:python_highlight_builtin_funcs = 0

" Functions
    " Strip whitespace
        function! StripTrailingWhitespace()
            let _s=@/
            let l = line(".")
            let c = col(".")
            %s/\s\+$//e
            let @/=_s
            call cursor(l, c)
        endfunction
