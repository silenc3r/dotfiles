"-----------------------------------------------------------------------------
" author:   Dawid Zych
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker: 
"-----------------------------------------------------------------------------

" Environment {
"
    " Basics {
        set nocompatible    " This must be in the first line
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
        endif
    " }

    " Setup Bundle Support {
        " The next three lines ensure that the ~/.vim/bundle/ system works
        filetype on
        filetype off
        set rtp+=~/.vim/bundle/vundle
        call vundle#rc()

        set background=dark           " Assume a dark background
        filetype plugin indent on     " Automatically detect file types.
        syntax on                     " Syntax highlighting

        Bundle 'gmarik/vundle'

        if executable('ack-grep')
            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            Bundle 'mileszs/ack.vim'
        elseif executable('ack')
            Bundle 'mileszs/ack.vim'
        elseif executable('ag')
            Bundle 'mileszs/ack.vim'
            let g:ackprg = 'ag --nogroup --nocolor --column'
        endif

        Bundle 'kien/ctrlp.vim'
        Bundle 'Lokaltog/vim-easymotion'
        Bundle 'mbbill/undotree'
        Bundle 'myusuf3/numbers.vim'
        Bundle 'vim-scripts/sessionman.vim'
        Bundle 'matchit.zip'
        Bundle 'godlygeek/tabular'
        if executable('ctags')
            Bundle 'majutsushi/tagbar'
        endif

        " Git
        Bundle 'tpope/vim-fugitive'
        Bundle 'airblade/vim-gitgutter'
        Bundle 'mattn/gist-vim'

        " Bundle 'mattn/webapi-vim'

        " Python
        " Bundle 'klen/python-mode'
        " Bundle 'python.vim'
        " Bundle 'python_match.vim'
        " Bundle 'pythoncomplete'

        " JavaScript
        " Bundle 'leshill/vim-json'
        " Bundle 'groenewege/vim-less'
        " Bundle 'pangloss/vim-javascript'
        " Bundle 'briancollins/vim-jst'
        " Bundle 'kchmck/vim-coffee-script'

        " HTML
        " Bundle 'amirh/HTML-AutoCloseTag'
        " Bundle 'hail2u/vim-css3-syntax'
        " Bundle 'tpope/vim-haml'

        " Ruby"
        " Bundle 'tpope/vim-rails'
        " let g:rubycomplete_buffer_loading = 1

        Bundle 'w0ng/vim-hybrid'
        Bundle 'Yggdroot/indentLine'
        Bundle 'tpope/vim-markdown'
        Bundle 'Raimondi/delimitMate'
        Bundle 'tomtom/tcomment_vim'
        Bundle 'tpope/vim-surround'
        Bundle 'tpope/vim-repeat'
        Bundle 'Valloric/YouCompleteMe'
        Bundle 'scrooloose/syntastic'
        Bundle 'SirVer/ultisnips'
        Bundle 'chrisbra/NrrwRgn'
        Bundle 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
        Bundle 'spf13/vim-gocode'
        Bundle 'jnwhiteh/vim-golang'
        Bundle 'jnurmine/Zenburn'
        " Bundle 'scrooloose/nerdtree'
        " Bundle 'altercation/vim-colors-solarized'
    " }

" }

" General {

    set mouse=a                   " Use mouse everywhere
    set mousehide                 " Hide mouse cursor when typing
    set encoding=utf-8
    scriptencoding utf-8

    if has ('x') && has ('gui')   " On Linux use + register for copy-paste
        " XXX it doesn't work from terminal, though                " +y does
        set clipboard=unnamedplus
    elseif has ('gui')            " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif

    set hidden                    " Don't write to disk upon buffer change
    set autoread                  " Auto reload files changed outside vim
    set nospell                   " Disable spell checking
    set shortmess+=filmnrxoOtT    " Abbrev. of messages (avoids 'hit enter')
    set viewoptions+=unix,slash   " Unix-windows compatibility
    set virtualedit=onemore,block " Allow for cursor beyond last character
    set history=1000              " Store a ton of history (default is 20)
    " set modelines=0             " Disable modelines (security)
    set noeb vb t_vb=             " Prevent screen flashing
    set ttyfast
    " set lazyredraw              " Redraw window only when necessary
    set title
    set splitbelow
    set splitright

    set nobackup
    set nowritebackup
    set noswapfile
    if has('persistent_undo')
        set undofile              " Persistent undo is sexy
        set undolevels=1000       " Maximum number of changes that can be undone
        set undoreload=10000      " Maximum number lines to save for undo on a buffer reload
    endif

" }

" Vim UI {

    " XXX colors shoud be set here
    if ($TERM =~ "-256color") || ($TERM =~ "-termite") || has('gui')
        set t_Co=256
        let g:hybrid_use_Xresources = 1
        colorscheme hybrid
        " colorscheme wombat256mod
        " colorscheme wombat256
        " let g:solarized_termcolors=256
        " colorscheme solarized
        " let g:solarized_italic=0
        " colorscheme diablo3
        " colorscheme ir_black
        " let s:low_color=1
        " colorscheme jellybeans
        " colorscheme peaksea
        " colorscheme werks
        " colorscheme xoria256
        " colorscheme candycode
        " colorscheme mustang
        " colorscheme miro8
        " colorscheme bubblegum
        " colorscheme molokai
        " colorscheme molokai_mod
        " colorscheme molokai_tom
        " colorscheme molokai_slosh
        " let g:zenburn_alternate_Visual = 1
        " let g:zenburn_high_Contrast = 1
        " let g:zenburn_old_Visual = 1
        " colorscheme zenburn
    else
        " colorscheme molokai
    endif

    set tabpagemax=15           " Only show 15 tabs
    " set showmode                " Display the current mode

    set cursorline              " Highlight cursor line
    highlight clear SignColumn  " SignColumn should match background
    hi ColorColumn ctermbg=0
    set colorcolumn=79

    " if has('cmdline_info')
    "     set ruler   " Show the ruler
    "     set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)    " A ruler on steroids
    "     set showcmd " Show partial commands in status line and
    "                 " Selected characters/lines in visual mode
    " endif

    " if has('statusline')
        set laststatus=2    " Always display the statusline in all windows

        " Broken down into easily includeable segments
    "     set statusline=%<%f\                     " Filename
    "     set statusline+=%w%h%m%r                 " Options
    "     set statusline+=%{fugitive#statusline()} " Git Hotness
    "     set statusline+=\ [%{&ff}/%Y]            " Filetype
    "     set statusline+=\ [%{getcwd()}]          " Current dir
    "     set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    " endif

    set backspace=indent,eol,start " Allow backspace in insert mode
    set linespace=0                " No extra spaces between rows
    set nu                         " Line numbers on
    set showmatch                  " Show matching braces
    set incsearch                  " Show next match while entering search
    set hlsearch                   " Highlight searches by default
    set ignorecase                 " Case insensitive search...
    set smartcase                  " ...until upper-case letter is typed
    set winminheight=0             " Windows can be 0 line high
    set gdefault                   " Set g flag on :s substitutions by default
    set tildeop                    " Extended tilde usage
    set scrolloff=0
    set sidescroll=1
    set sidescrolloff=8
    set foldenable
    set foldminlines=3
    set list
    set listchars=nbsp:·,extends:❯,precedes:❮,tab:»\ ,trail:·
    " set listchars=nbsp:·,extends:❯,precedes:❮,tab:▸\

    " Completion {
    set wildmenu                           " Show list instead of just completing
    if exists("&wildignorecase")
        set wildignorecase
    endif
    set wildignore+=*.o,*~,.lo,*.obj,*.pyc " Files to ignore while tab completing
    set suffixes+=.in,.a                   " Files with lower priority while completing
    set completeopt=menuone,longest        " Complete options for insert mode
    set wildmode=longest,list:longest
    " set wildmode=list:longest,full       " Command <Tab> completion, list matches, then longest common part, then all.
    " }

" }

" Formatting {

    set nowrap                      " Don't wrap long lines
    set autoindent                  " Indent at the same level of the previous line
    set shiftwidth=4                " Use indents of 4 spaces
    set shiftround                  " Round indent to multiple of shiftwidth
    set expandtab                   " Tabs are spaces, not tabs
    set smarttab
    set tabstop=4                   " An indentation every four columns
    set softtabstop=0               " Don't let backspace delete indent, use ^D
    "set matchpairs+=<:>             " Match, to be used with %
    set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,go,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    autocmd FileType go autocmd BufWritePre <buffer> Fmt

" }


set undodir=$HOME/.vim/undo


" Keymaps {

    " Remap <Leader> to SPACEBAR
    let mapleader = ' ' 
    " Fuck you, manual key.
    nnoremap K <Nop>

    " nnoremap ' `
    " nnoremap ` '

    " Search mappings: These will make it so that going to the next one in a
    " search will center on the line it's found in.
    nnoremap N Nzz
    nnoremap n nzz

    nnoremap g; g;zz
    nnoremap g. g.zz

    " noremap <F5> :set list!<CR>
    " noremap <F6> :set wrap!<CR>

    " nnoremap <leader>ev :vsplit $MYVIMRC<cr>
    " nnoremap <leader>sv :source $MYVIMRC<cr>

    " fly between buffers
    nnoremap <leader>l :ls<CR>:b<space>

    " Make Y copy from current position to eol
    nnoremap Y y$

    " save the current file as root
    cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>"

    " space bar un-highlights search
    :noremap <silent> <Space> :silent noh<Bar>echo<CR>

    " unmap arrow keys
    nnoremap <up> <nop>
    nnoremap <down> <nop>
    nnoremap <left> <nop>
    nnoremap <right> <nop>
    inoremap <up> <nop>
    inoremap <down> <nop>
    inoremap <left> <nop>
    inoremap <right> <nop>

    " use sane regexes
    nnoremap / /\v
    vnoremap / /\v

    " reselect visual block after indent/outdent
    vnoremap < <gv
    vnoremap > >gv

    " move by display lines, not logical lines
    nnoremap <silent> j gj
    nnoremap <silent> k gk
    " Make logical line move accessible
    nnoremap <silent> gj j
    nnoremap <silent> gk k
    " H movest to begining of line, L to the end
    " nnoremap H ^
    " nnoremap L g_
    " Scroll faster
    " nnoremap <C-e> 3<C-e>
    " nnoremap <C-y> 3<C-y>


    " Easier window/buffer navigation
    " nnoremap <C-j> <C-w>j
    " nnoremap <C-k> <C-w>k
    " nnoremap <C-h> <C-w>h
    " nnoremap <C-l> <C-w>l
    
    " Same as above but maximizes split height after switch
    noremap <C-J> <C-W>j<C-W>_
    noremap <C-K> <C-W>k<C-W>_
    noremap <C-L> <C-W>l<C-W>_
    noremap <C-H> <C-W>h<C-W>_
    " was 'map'

    " Some annoying keyfixes"
    if has("user_commands")
        command! -bang -nargs=* -complete=file E e<bang> <args>
        command! -bang -nargs=* -complete=file W w<bang> <args>
        command! -bang -nargs=* -complete=file Wq wq<bang> <args>
        command! -bang -nargs=* -complete=file WQ wq<bang> <args>
        command! -bang Wa wa<bang>
        command! -bang WA wa<bang>
        command! -bang Q q<bang>
        command! -bang QA qa<bang>
        command! -bang Qa qa<bang>
    endif

    " Split window vertically
    noremap <leader>v <C-w>v    

    " Code folding options
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>

    " Toggle search highlighting
    nmap <silent> <leader>/ :set invhlsearch<CR>

    " Easier horizontal scrolling
    map zl zL
    map zh zH

    nnoremap <leader>2 :set ts=2 sw=2<CR>
    nnoremap <leader>4 :set ts=4 sw=4<CR>
    nnoremap <leader>8 :set ts=8 sw=8<CR>

" }

    " Autocmds
    autocmd FileType text setlocal textwidth=80 colorcolumn=+1


""" Language specific options
" let python_highlight_all = 1
" let python_highlight_space_errors = 1
" let python_fold=1


" Plugins {

    " Misc {
        " let g:NERDShutUp=1
        " let b:match_ignorecase = 1
    " }

    " Indent line {
    " let g:indentLine_char="¦"
    " let g:indentLine_first_char="¦"
    " }

    " PowerLine {
    " Don't lag on changing modes - fixes problems with YCM autocompletion
    if ! has('gui_running')
        set ttimeoutlen=10
        augroup FastEscape
            autocmd!
            au InsertEnter * set timeoutlen=0
            au InsertLeave * set timeoutlen=1000
        augroup END
    endif
    " }

    " Ctags {
        set tags=./tags;/,~/.vimtags
    " }

    " NerdTree {
        " map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
        " map <leader>e :NERDTreeFind<CR>
        " nmap <leader>nt :NERDTreeFind<CR>

        " let NERDTreeShowBookmarks=1
        " let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
        " let NERDTreeChDirMode=0
        " let NERDTreeQuitOnOpen=1
        " let NERDTreeMouseMode=2
        " let NERDTreeShowHidden=1
        " let NERDTreeKeepTreeInNewTab=1
        " let g:nerdtree_tabs_open_on_gui_startup=0
    " }

    " Tabularize {
        nmap <Leader>a& :Tabularize /&<CR>
        vmap <Leader>a& :Tabularize /&<CR>
        nmap <Leader>a= :Tabularize /=<CR>
        vmap <Leader>a= :Tabularize /=<CR>
        nmap <Leader>a: :Tabularize /:<CR>
        vmap <Leader>a: :Tabularize /:<CR>
        nmap <Leader>a:: :Tabularize /:\zs<CR>
        vmap <Leader>a:: :Tabularize /:\zs<CR>
        nmap <Leader>a, :Tabularize /,<CR>
        vmap <Leader>a, :Tabularize /,<CR>
        nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        nmap <Leader>a" :Tabularize /"<CR>
        vmap <Leader>a" :Tabularize /"<CR>
    " }

    " Session List {
        set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
        nmap <leader>sl :SessionList<CR>
        nmap <leader>ss :SessionSave<CR>
    " }

    " JSON {
        nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    " }

    " PyMode {
        let g:pymode_lint_checker = "pyflakes"
        let g:pymode_utils_whitespaces = 0
        let g:pymode_options = 0
    " }

    " ctrlp {
        let g:ctrlp_working_path_mode = 2
        nnoremap <silent> <D-t> :CtrlP<CR>
        nnoremap <silent> <D-r> :CtrlPMRU<CR>
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$\|\.dll$' }

        let g:ctrlp_user_command = {
            \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
                \ 2: ['.hg', 'hg --cwd %s locate -I .'],
            \ },
            \ 'fallback': 'find %s -type f'
        \ }
    "}

    " TagBar {
        nnoremap <silent> <leader>tt :TagbarToggle<CR>
    "}

    " PythonMode {
    " Disable if python support not present
        if !has('python')
            let g:pymode = 1
        endif
    " }

    " Fugitive {
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
    "}

    " UndoTree {
        nnoremap <Leader>u :UndotreeToggle<CR>
        " If undotree is opened, it is likely one wants to interact with it.
        let g:undotree_SetFocusWhenToggle=1
    " }

" }

" Functions {

    " UnBundle {
    function! UnBundle(arg, ...)
      let bundle = vundle#config#init_bundle(a:arg, a:000)
      call filter(g:bundles, 'v:val["name_spec"] != "' . a:arg . '"')
    endfunction

    com! -nargs=+         UnBundle
    \ call UnBundle(<args>)
    " }

    " Strip whitespace {
        function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
            let _s=@/
            let l = line(".")
            let c = col(".")
    " do the business:
            %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
            let @/=_s
            call cursor(l, c)
        endfunction
    " }

" }
