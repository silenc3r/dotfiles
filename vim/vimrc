"-------------------------------------------------------------------------------
" file:     $HOME/.vimrc
" author:   Dawid Zych
"-------------------------------------------------------------------------------

set nocompatible    " use vim settings instead of vi
                    " this is mandatory for most of below settings to work

" =============== Pathogen Initialization ======================================

call pathogen#infect()
call pathogen#helptags()

" =============== General Options ========================================== {{{

set hidden                      " Don't write to disk upon buffer change
set autoread                    " Auto reload files changed outside vim
set encoding=utf-8
set viewoptions+=unix,slash     " Unix-windows compatibility
set history=1000
set grepprg=grep\ -nH\ $*
" set modelines=0               " Disable modelines (security)
set noeb vb t_vb=               " Prevent screen flashing
set ttyfast
" set lazyredraw                  " Redraw window only when necessary
set title

set mouse=v                     " Use mouse only in visual mode
set mousehide                   " Hide mouse cursor when typing

" Key options
set backspace=indent,eol,start  " Allow backspace in insert mode
set tildeop                     " Extended tilde usage


set splitbelow
set splitright

syntax on                       " Turn on syntax highlighting

" GUI options
if has('autocmd')
    au GUIEnter * set vb t_vb=
endif
set go-=m                       "remove menubar
set go-=T
set go-=r
set gfn=Menlo\ 10
set gcr=a:blinkon0              "Disable cursor blink
" }}}

" =============== Searching ================================================ {{{

set hlsearch                    " Highlight searches by default
set ignorecase                  " Case insensitive search...
set smartcase                   " ...until upper-case letter is typed
set incsearch                   " Show next match while entering search
set gdefault                    " Set g flag on :s substitutions by default
set showmatch                   " Show matching braces
" }}}

" =============== Backup and Undo ========================================== {{{

set backup
set backupdir=$HOME/.vim/backup
set noswapfile
set directory=$HOME/.vim/swap
set undofile
set undodir=$HOME/.vim/undo
" }}}

" =============== Colors =================================================== {{{

if ($TERM =~ "-256color") || has('gui')
    set t_Co=256
    " colorscheme wombat256mod
    " colorscheme wombat256
    " let g:solarized_termcolors=256
    " colorscheme solarized
    " let g:solarized_italic=0
    " set background=dark
    " colorscheme diablo3
    " colorscheme ir_black
    " let s:low_color=1
    " colorscheme jellybeans
    " colorscheme peaksea
    " colorscheme werks
    " colorscheme xoria256
    " colorscheme candycode
    " colorscheme mustang
    " colorscheme miro8
    " colorscheme bubblegum
    " colorscheme molokai
    colorscheme molokai_mod
    " colorscheme molokai_tom
    " colorscheme molokai_slosh
    " let g:zenburn_high_Contrast=1
    " colorscheme zenburn
else
    " colorscheme molokai
endif
" }}}

" =============== Visual options =========================================== {{{

set cursorline                  " Highlight cursor line
set relativenumber              " Relative line numbering
set textwidth=80
set colorcolumn=+1
set formatoptions=qrn1
set list                        " Display tabs and trailing spaces 
" set listchars=nbsp:·,eol:¬,extends:❯,precedes:❮,tab:▸\ 
set listchars=nbsp:·,eol:¬,tab:▸\ 
set virtualedit=block,onemore   " Allow for cursor beyond last character
set nowrap
set linebreak                   " Wrap lines at convenient points
set scrolloff=0                 " Number of lines to keep above/below cursor
set sidescroll=1                " Scroll one column at time
set sidescrolloff=8
" }}}

" =============== Statusline =============================================== {{{

if has('statusline')
    set laststatus=2                " status line, always
    set statusline=%<%f\            " Filename
    set statusline+=%w%h%m%r        " Options
    set statusline+=\ [%{&ff}/%Y]   " filetype
    set statusline+=\ [%{getcwd()}] " current dir
    set statusline+=%=%-8.(%l,%c%V%)\ %p%% " Right aligned file nav info
endif
set showcmd                     " Display incomplete commands
set shortmess+=mrI               " Abbrev. of messages (avoids 'hit enter')
" }}}

" =============== Indentation ============================================== {{{

set autoindent
set smartindent
set smarttab
set tabstop=4                   " Tab width
set softtabstop=4               " Let backspace delete indent
set shiftwidth=4                " Indentation width
set shiftround                  " Round indent to multiple of shiftwidth
set expandtab

filetype plugin indent on       " Automatically detect file types
" }}}

" =============== Folding ================================================== {{{

if has ('folding')
    set foldenable
    set foldmethod=indent
    " set foldcolumn=1
    set foldminlines=3
    set foldmarker={{{,}}}
    set foldlevelstart=99
endif
" }}}

" =============== Completion =============================================== {{{

set wildmenu                    " Show list instead of just completing
if exists("&wildignorecase")
    set wildignorecase
endif
set wildignore+=*.o,*~,.lo,*.obj    " Files to ignore while tab completing
set wildignore+=*vim/backup*
set suffixes+=.in,.a            " Files with lower priority while completing
set completeopt=menuone,longest " Complete options for insert mode
set wildmode=longest,list:longest
" }}}

" Clipboard
set clipboard=unnamedplus       " copy to clipboard, 'unnamed' in windows

" =============== Keymaps =============== {{{

" change <LocalLeader> to ,
let maplocalleader = '\\'
let mapleader = ','

" Fuck you, manual key.
nnoremap K <Nop>

nnoremap ' `
nnoremap ` '

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap N Nzz
nnoremap n nzz

nnoremap g; g;zz
nnoremap g. g.zz

noremap <F5> :set list!<CR>
noremap <F6> :set wrap!<CR>
set pastetoggle=<F12>

:nnoremap <leader>ev :vsplit $MYVIMRC<cr>
:nnoremap <leader>sv :source $MYVIMRC<cr>

" Move lines up and down
nnoremap - ddp
nnoremap _ ddkP

" Make Y copy from current position to eol
nnoremap Y y$

" escape is too far
inoremap jk <Esc>
" shift is hard
noremap ; :

" save the current file as root
cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>"

" space bar un-highlights search
:noremap <silent> <Space> :silent noh<Bar>echo<CR>

" unmap arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" use sane regexes
nnoremap / /\v
vnoremap / /\v

" reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" move by display lines, not logical lines
nnoremap j gj
nnoremap k gk
" Make logical line move accessible
nnoremap <silent> gj j
nnoremap <silent> gk k
" H movest to begining of line, L to the end
nnoremap H ^
nnoremap L g_
" Scroll faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

nnoremap <Tab> %

" Easier window/buffer navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-n> :bn<CR>
nnoremap <C-p> :bp<CR>
noremap <leader>v <C-w>v

" Autocmds
autocmd FileType text setlocal textwidth=80 colorcolumn=+1

" Abbreviations
abbr lenght length
abbr heigth height
abbr widht width

""" Language specific options
let python_highlight_all = 1
let python_highlight_space_errors = 1
let python_fold=1

" }}}

" =============== Plugins =============== {{{

" SnipMate
" Setting the author var
" If forking, please overwrite in your .vimrc.local file
let g:snips_author = 'Steve Francia <steve.francia@gmail.com>'
" Shortcut for reloading snippets, useful when developing
nnoremap ,smr <esc>:exec ReloadAllSnippets()<cr>

" NerdTree
map <F4> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
map <localleader>e :NERDTreeFind<CR>
nmap <localleader>nt :NERDTreeFind<CR>

let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1

" Notes
let g:notes_directory = '~/Notes'
let g:notes_suffix = '.note'

" }}}
