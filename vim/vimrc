"-----------------------------------------------------------------------------
" author:   Dawid Zych
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:
"-----------------------------------------------------------------------------

" Environment {
    set nocompatible    " This must be in the first line

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
        endif
    " }

    " Setup Plugin Support {
        call plug#begin('~/.vim/plugged')

        " Utils
        if executable('ag')
            Plug 'rking/ag.vim'
        endif

        if executable('ctags')
            Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
        endif

        " Send commands to tmux, useful in TDD
        Plug 'lord-garbage/vimtux'
        Plug 'Shougo/unite.vim', { 'on': 'Unite' }
        Plug 'tpope/vim-vinegar'
        Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
        Plug 'matchit.zip'
        " Plug 'chrisbra/NrrwRgn'
        Plug 'justinmk/vim-sneak'
        " Display marks
        Plug 'kshenoy/vim-signature'
        " Fancy start screen
        Plug 'mhinz/vim-startify'

        Plug 'tpope/vim-markdown'

        " Git
        Plug 'tpope/vim-fugitive'
        Plug 'mhinz/vim-signify'
        Plug 'mattn/gist-vim'

        " Text sculpting
        Plug 'junegunn/vim-easy-align'
        Plug 'tpope/vim-commentary'
        Plug 'tpope/vim-surround'
        Plug 'tpope/vim-repeat'

        " Autocompletion & Syntax check
        Plug 'Valloric/YouCompleteMe'
        Plug 'scrooloose/syntastic'
        " Plug 'SirVer/ultisnips'
        " Automatic closing of quotes, parenthesis, brackets, etc.
        Plug 'Raimondi/delimitMate'

        " UI
        Plug 'itchyny/lightline.vim'

        " Colorschemes
        Plug 'chriskempson/vim-tomorrow-theme'
        Plug 'chriskempson/base16-vim'
        Plug 'twilight'
        " Plug 'sickill/vim-monokai'
        Plug 'nanotech/jellybeans.vim'
        Plug 'altercation/vim-colors-solarized'

        " Python
        Plug 'klen/python-mode', { 'for': 'python'}

        call plug#end()
    " }
" }

" General {

    filetype plugin indent on     " Automatically detect file types.
    syntax on                     " Syntax highlighting
    set mouse=a                   " Use mouse everywhere
    set encoding=utf-8
    scriptencoding utf-8

    if has('unnamedplus')
        " On Linux use + register for copy-paste
        set clipboard=unnamedplus
    else
        " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif

    set hidden                    " Don't write to disk upon buffer change
    set autoread                  " Auto reload files changed outside vim
    set shortmess+=mr             " Abbrev. of messages (avoids 'hit enter')
    set viewoptions+=unix,slash   " Unix-windows compatibility
    set history=1000              " Store a ton of history (default is 20)

    set nowritebackup
    set noswapfile
    if has('persistent_undo')
        set undofile              " Persistent undo is sexy
        set undolevels=1000       " Maximum number of undo
        set undodir=$HOME/.vim/undo
    endif

" }

" User Interface {
    " Colors {
        set background=dark         " Assume a dark background
        " if ($TERM =~ "xterm") || ($TERM =~ "-256color")
            set t_Co=256
            " set t_Co=16
            " colorscheme Tomorrow-Night-Eighties
            " colorscheme Tomorrow-Night
            " colorscheme Monokai
            let base16colorspace=256
            colorscheme base16-default
            let g:airline_theme='bubblegum'
            " colorscheme jellybeans
            " let g:solarized_termcolors=256
            " let g:solarized_termtrans=1
            " colorscheme solarized
        " endif
    " }

    set showcmd                 " Show partial commands in status line and
                                " selected characters/lines in visual mode
    set laststatus=2            " Always display the statusline in all windows
    set winminheight=0          " Windows can be 0 line high (only statusbar)
    set ttyfast                 " Always assume fast terminal connection
    set lazyredraw              " Avoid scrolling problems
    set vb t_vb=                " Prevent screen flashing
    set title
    set splitbelow              " Put new window below the current one
    set splitright              " Put new window right of the current one
    set scrolloff=5             " Min nr of lines to keep above/below cursor
    set sidescroll=2            " Minimal number of columns to scroll horiz.
    set sidescrolloff=8
    set list
    set listchars=nbsp:␣,extends:❯,precedes:❮,tab:»\ ,trail:·
    " set listchars=nbsp:·,extends:❯,precedes:❮,tab:▸\
    set virtualedit=onemore,block " Allow for cursor beyond last character

    set cursorline              " Highlight cursor line
    set colorcolumn=79          " Highlight chosen column

    set number          " Display current line number
    set relativenumber  " Use relative line numbering
    " ...but change it to absolute numbering in insert mode
    autocmd InsertEnter * :set relativenumber!
    autocmd InsertLeave * :set relativenumber
    autocmd CursorMoved * :set relativenumber

    " Search {
        set incsearch               " Show next match while entering search
        set hlsearch                " Highlight searches by default
        set ignorecase              " Case insensitive search...
        set smartcase               " ...until upper-case letter is typed
        set showmatch               " Show matching braces
    " }

    " Completion {
        " Show scrollable menu instead of just completing
        set wildmenu
        " Command <Tab> completion: list matches, then longest common part,
        " then all.
        set wildmode=list:longest,full
        set wildignorecase
        " Files to ignore while tab completing
        set wildignore+=*.o,*~,.lo,*.obj,*.pyc
        " Files with lower priority while completing
        set suffixes+=.in,.a
        " Complete options for insert mode
        set completeopt=menuone
    " }
" }

" Formatting & Editting {
    set nowrap                 " Don't wrap long lines
    set autoindent             " Indent at the same level of the previous line
    set shiftwidth=4           " Use indents of 4 spaces
    set shiftround             " Round indent to multiple of shiftwidth
    set expandtab              " Tabs are spaces, not tabs
    set smarttab
    set tabstop=4              " An indentation every four columns
    set softtabstop=4          " Let backspace delete indent
    set gdefault               " Set g flag on :s substitutions by default
    set tildeop                " Let tilde work with movement keys
    set backspace=indent,eol,start " Allow backspace in insert mode

    " Remove trailing whitespaces and ^M chars
    autocmd FileType c,cpp,java,go,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    autocmd FileType go autocmd BufWritePre <buffer> Fmt
    autocmd FileType text setlocal textwidth=80 colorcolumn=+1
" }

" Keymaps {
    " Remap <Leader> to SPACEBAR
    let mapleader = ' '
    " Fuck you, manual key.
    nnoremap K <Nop>

    " Toggle search highlighting
    nmap <silent> <leader>h :set invhlsearch<CR>

    " While searching center on the line with current result
    nnoremap N Nzzzv
    nnoremap n nzzzv
    nnoremap g; g;zzzv
    nnoremap g. g.zzzv

    " Scroll faster
    nnoremap <C-e> 5<C-e>
    nnoremap <C-y> 5<C-y>

    " Easier horizontal scrolling
    nnoremap zl 15zl
    nnoremap zh 15zh

    " fly between buffers
    nnoremap <leader>l :ls<CR>:b<space>

    " Make Y copy from current position to eol
    nnoremap Y y$

    " use sane regexes
    nnoremap / /\v
    vnoremap / /\v

    " reselect visual block after indent/outdent
    vnoremap < <gv
    vnoremap > >gv

    " Quickly change tab length
    nnoremap <leader>2 :set ts=2 sw=2 sts=2<CR>
    nnoremap <leader>4 :set ts=4 sw=4 sts=4<CR>
    nnoremap <leader>8 :set ts=8 sw=8 sts=8<CR>

    " Split window vertically
    noremap <leader>v <C-w>v

    " Easier window navigation, <C-W>_ maximizes window after switch"
    nnoremap <C-J> <C-W>j
    nnoremap <C-K> <C-W>k
    nnoremap <C-L> <C-W>l
    nnoremap <C-H> <C-W>h

    " save the current file as root
    cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

    " Some annoying keyfixes"
    if has("user_commands")
        command! -bang -nargs=* -complete=file E e<bang> <args>
        command! -bang -nargs=* -complete=file W w<bang> <args>
        command! -bang -nargs=* -complete=file Wq wq<bang> <args>
        command! -bang -nargs=* -complete=file WQ wq<bang> <args>
        command! -bang Wa wa<bang>
        command! -bang WA wa<bang>
        command! -bang Q q<bang>
        command! -bang QA qa<bang>
        command! -bang Qa qa<bang>
    endif
" }

" Plugins {
    " PowerLine / airline {
    " Don't lag on changing modes - fixes problems with YCM autocompletion
    if ! has('gui_running')
        set ttimeoutlen=10
        augroup FastEscape
            autocmd!
            au InsertEnter * set timeoutlen=0
            au InsertLeave * set timeoutlen=1000
        augroup END
    endif
    " }

    " Lightline {
    " TODO: configure fugitive & syntastic support
    let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ }
    " }

    " Ctags {
        set tags=./tags;/,~/.vimtags
    " }

    " Syntastic {
        let g:syntastic_check_on_open = 1
        " let g:syntastic_error_symbol = '✗'
        " let g:syntastic_warning_symbol = '!'
        let g:syntastic_python_checkers = ['flake8']
        " let g:syntastic_python_flake8_args = '--ignore="E501,E302,E261,E701,E241,E126,E127,E128,W801,E226"'
    " }

    " vim-easy-align {
        " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
        vmap <Enter> <Plug>(EasyAlign)
        " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
        nmap <Leader>a <Plug>(EasyAlign)
    " }

    " PyMode {
        " let Syntastic take care of syntax checking
        let g:pymode_lint = 0
        " use YouCompleteMe for code-completion
        let g:pymode_rope_completion = 0
    " }

    " Unite {
        let g:unite_source_history_yank_enable = 1
        " call unite#filters#matcher_default#use(['matcher_fuzzy'])
        autocmd FileType unite call unite#filters#matcher_default#use(['matcher_fuzzy'])
        nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files -start-insert file_rec/async:!<cr>
        nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files -start-insert file<cr>
        nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru -start-insert file_mru<cr>
        nnoremap <leader>o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
        nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank history/yank<cr>
        nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer buffer<cr>
    " }

    " TagBar {
        nnoremap <silent> <leader>tt :TagbarToggle<CR>
    "}

    " Fugitive {
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
    "}

    " UndoTree {
        nnoremap <Leader>u :UndotreeToggle<CR>
        " If undotree is opened, it is likely one wants to interact with it.
        let g:undotree_SetFocusWhenToggle=1
    " }

    " Netrw {
        " prevent leaking of directory history
        let g:netrw_dirhistmax=-1
    " }

    " Sneak {
        " let it behave similar to easymotion
        let g:sneak#streak = 1
        " use global vim settings for case sensitivity
        let g:sneak#use_ic_scs = 1
    " }
" }

" Functions {
    " Strip whitespace {
        function! StripTrailingWhitespace()
    " Preparation: save last search, and cursor position.
            let _s=@/
            let l = line(".")
            let c = col(".")
    " do the business:
            %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
            let @/=_s
            call cursor(l, c)
        endfunction
    " }
" }
